provider "aws" {
  region = "us-east-1"
}

# Create a unique S3 bucket
resource "aws_s3_bucket" "unique_bucket" {
  bucket = "my-unique-bucket-${random_id.bucket_id.hex}"
}

# Generate a random ID for uniqueness
resource "random_id" "bucket_id" {
  byte_length = 8
}

# IAM role for Lambda execution
resource "aws_iam_role" "lambda_execution_role" {
  name = "lambda-execution-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "lambda.amazonaws.com"
        }
      },
    ]
  })
}

# IAM policy for Lambda to allow access to the S3 bucket
resource "aws_iam_policy" "lambda_s3_access_policy" {
  name        = "lambda-s3-access-policy"
  description = "Allow Lambda to access S3 bucket"
  
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action   = "s3:GetObject"
        Effect   = "Allow"
        Resource = "${aws_s3_bucket.unique_bucket.arn}/*"
      }
    ]
  })
}

# Attach the policy to the IAM role
resource "aws_iam_role_policy_attachment" "lambda_s3_access" {
  role       = aws_iam_role.lambda_execution_role.name
  policy_arn = aws_iam_policy.lambda_s3_access_policy.arn
}

# Lambda function code
resource "aws_lambda_function" "image_upload_lambda" {
  function_name = "image-upload-lambda"
  role          = aws_iam_role.lambda_execution_role.arn
  handler       = "index.handler"
  runtime       = "python3.8"

  # Lambda function code
  filename = "lambda_function.zip"

  source_code_hash = filebase64sha256("lambda_function.zip")
}

# Lambda function to be triggered by S3 event
resource "aws_s3_bucket_notification" "s3_event" {
  bucket = aws_s3_bucket.unique_bucket.bucket

  lambda_function {
    events        = ["s3:ObjectCreated:*"]
    filter_prefix = "images/"  # Optional, if you want to specify a folder
    lambda_function_arn = aws_lambda_function.image_upload_lambda.arn
  }
}

# Grant the S3 bucket permission to invoke Lambda function
resource "aws_lambda_permission" "allow_s3_to_invoke_lambda" {
  statement_id  = "AllowS3InvokeLambda"
  action        = "lambda:InvokeFunction"
  principal     = "s3.amazonaws.com"
  function_name = aws_lambda_function.image_upload_lambda.function_name
  source_arn    = aws_s3_bucket.unique_bucket.arn
}
